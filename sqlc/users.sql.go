// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password_hash, permissions)
VALUES (?, ?, ?)
RETURNING id, username, password_hash, permissions, telegram_chat_id, created_at, deleted_at
`

type CreateUserParams struct {
	Username     string `json:"username"`
	PasswordHash string `json:"password_hash"`
	Permissions  int64  `json:"permissions"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.PasswordHash, arg.Permissions)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Permissions,
		&i.TelegramChatID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, password_hash, permissions, telegram_chat_id, created_at, deleted_at
FROM users
WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Permissions,
		&i.TelegramChatID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByTelegramID = `-- name: GetUserByTelegramID :one
SELECT id, username, password_hash, permissions, telegram_chat_id, created_at, deleted_at
FROM users
WHERE telegram_chat_id = ? AND deleted_at IS NULL
`

func (q *Queries) GetUserByTelegramID(ctx context.Context, telegramChatID sql.NullInt64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByTelegramID, telegramChatID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Permissions,
		&i.TelegramChatID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password_hash, permissions, telegram_chat_id, created_at, deleted_at
FROM users
WHERE username = ? AND deleted_at IS NULL
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Permissions,
		&i.TelegramChatID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, password_hash, permissions, telegram_chat_id, created_at, deleted_at 
FROM users
WHERE deleted_at IS NULL
ORDER BY permissions DESC, id ASC
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.PasswordHash,
			&i.Permissions,
			&i.TelegramChatID,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserPermissions = `-- name: UpdateUserPermissions :exec
UPDATE users
SET permissions = ?
WHERE id = ?
`

type UpdateUserPermissionsParams struct {
	Permissions int64 `json:"permissions"`
	ID          int64 `json:"id"`
}

func (q *Queries) UpdateUserPermissions(ctx context.Context, arg UpdateUserPermissionsParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPermissions, arg.Permissions, arg.ID)
	return err
}

const updateUserTelegramID = `-- name: UpdateUserTelegramID :exec
UPDATE users
SET telegram_chat_id = ?
WHERE id = ?
`

type UpdateUserTelegramIDParams struct {
	TelegramChatID sql.NullInt64 `json:"telegram_chat_id"`
	ID             int64         `json:"id"`
}

func (q *Queries) UpdateUserTelegramID(ctx context.Context, arg UpdateUserTelegramIDParams) error {
	_, err := q.db.ExecContext(ctx, updateUserTelegramID, arg.TelegramChatID, arg.ID)
	return err
}
