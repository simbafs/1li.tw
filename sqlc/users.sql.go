// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one

INSERT INTO users (username, password_hash, permissions, telegram_chat_id)
VALUES (?, ?, ?, ?)
RETURNING id, username, permissions, created_at
`

type CreateUserParams struct {
	Username       string        `json:"username"`
	PasswordHash   string        `json:"password_hash"`
	Permissions    int64         `json:"permissions"`
	TelegramChatID sql.NullInt64 `json:"telegram_chat_id"`
}

type CreateUserRow struct {
	ID          int64     `json:"id"`
	Username    string    `json:"username"`
	Permissions int64     `json:"permissions"`
	CreatedAt   time.Time `json:"created_at"`
}

// sql/queries/users.sql
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.PasswordHash,
		arg.Permissions,
		arg.TelegramChatID,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Permissions,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, password_hash, permissions, telegram_chat_id, created_at FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Permissions,
		&i.TelegramChatID,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password_hash, permissions, telegram_chat_id, created_at FROM users
WHERE username = ? LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Permissions,
		&i.TelegramChatID,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserRole = `-- name: UpdateUserRole :exec
UPDATE users
SET permissions = ?
WHERE id = ?
`

type UpdateUserRoleParams struct {
	Permissions int64 `json:"permissions"`
	ID          int64 `json:"id"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateUserRole, arg.Permissions, arg.ID)
	return err
}

const updateUserTelegramID = `-- name: UpdateUserTelegramID :exec
UPDATE users
SET telegram_chat_id = ?
WHERE id = ?
`

type UpdateUserTelegramIDParams struct {
	TelegramChatID sql.NullInt64 `json:"telegram_chat_id"`
	ID             int64         `json:"id"`
}

func (q *Queries) UpdateUserTelegramID(ctx context.Context, arg UpdateUserTelegramIDParams) error {
	_, err := q.db.ExecContext(ctx, updateUserTelegramID, arg.TelegramChatID, arg.ID)
	return err
}
