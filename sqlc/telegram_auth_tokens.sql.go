// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: telegram_auth_tokens.sql

package sqlc

import (
	"context"
	"time"
)

const createTelegramAuthToken = `-- name: CreateTelegramAuthToken :exec

INSERT INTO telegram_auth_tokens (token, telegram_chat_id, expires_at)
VALUES (?, ?, ?)
`

type CreateTelegramAuthTokenParams struct {
	Token          string    `json:"token"`
	TelegramChatID int64     `json:"telegram_chat_id"`
	ExpiresAt      time.Time `json:"expires_at"`
}

// sql/queries/telegram_auth_tokens.sql
func (q *Queries) CreateTelegramAuthToken(ctx context.Context, arg CreateTelegramAuthTokenParams) error {
	_, err := q.db.ExecContext(ctx, createTelegramAuthToken, arg.Token, arg.TelegramChatID, arg.ExpiresAt)
	return err
}

const deleteTelegramAuthToken = `-- name: DeleteTelegramAuthToken :exec
DELETE FROM telegram_auth_tokens
WHERE token = ?
`

func (q *Queries) DeleteTelegramAuthToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deleteTelegramAuthToken, token)
	return err
}

const getTelegramAuthToken = `-- name: GetTelegramAuthToken :one
SELECT token, telegram_chat_id, expires_at FROM telegram_auth_tokens
WHERE token = ? AND expires_at > CURRENT_TIMESTAMP LIMIT 1
`

func (q *Queries) GetTelegramAuthToken(ctx context.Context, token string) (TelegramAuthToken, error) {
	row := q.db.QueryRowContext(ctx, getTelegramAuthToken, token)
	var i TelegramAuthToken
	err := row.Scan(&i.Token, &i.TelegramChatID, &i.ExpiresAt)
	return i, err
}
