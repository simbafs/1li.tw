// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: short_urls.sql

package sqlc

import (
	"context"
)

const createShortURL = `-- name: CreateShortURL :one
INSERT INTO short_urls (short_path, original_url, user_id)
VALUES (?, ?, ?)
RETURNING id, short_path, original_url, user_id, created_at, deleted_at
`

type CreateShortURLParams struct {
	ShortPath   string `json:"short_path"`
	OriginalURL string `json:"original_url"`
	UserID      int64  `json:"user_id"`
}

func (q *Queries) CreateShortURL(ctx context.Context, arg CreateShortURLParams) (ShortUrl, error) {
	row := q.db.QueryRowContext(ctx, createShortURL, arg.ShortPath, arg.OriginalURL, arg.UserID)
	var i ShortUrl
	err := row.Scan(
		&i.ID,
		&i.ShortPath,
		&i.OriginalURL,
		&i.UserID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteShortURL = `-- name: DeleteShortURL :exec
UPDATE short_urls
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) DeleteShortURL(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteShortURL, id)
	return err
}

const getShortURLByID = `-- name: GetShortURLByID :one
SELECT id, short_path, original_url, user_id, created_at, deleted_at
FROM short_urls
WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) GetShortURLByID(ctx context.Context, id int64) (ShortUrl, error) {
	row := q.db.QueryRowContext(ctx, getShortURLByID, id)
	var i ShortUrl
	err := row.Scan(
		&i.ID,
		&i.ShortPath,
		&i.OriginalURL,
		&i.UserID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getShortURLByPath = `-- name: GetShortURLByPath :one
SELECT id, short_path, original_url, user_id, created_at, deleted_at
FROM short_urls
WHERE short_path = ? AND deleted_at IS NULL
`

func (q *Queries) GetShortURLByPath(ctx context.Context, shortPath string) (ShortUrl, error) {
	row := q.db.QueryRowContext(ctx, getShortURLByPath, shortPath)
	var i ShortUrl
	err := row.Scan(
		&i.ID,
		&i.ShortPath,
		&i.OriginalURL,
		&i.UserID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listAllShortURLs = `-- name: ListAllShortURLs :many
SELECT
    su.id, su.short_path, su.original_url, su.user_id, su.created_at, su.deleted_at,
    (SELECT COUNT(*) FROM url_clicks uc WHERE uc.short_url_id = su.id) AS total_clicks
FROM short_urls su
JOIN users u ON su.user_id = u.id
WHERE su.deleted_at IS NULL
ORDER BY su.created_at DESC
`

type ListAllShortURLsRow struct {
	ShortUrl    ShortUrl `json:"short_url"`
	TotalClicks int64    `json:"total_clicks"`
}

func (q *Queries) ListAllShortURLs(ctx context.Context) ([]ListAllShortURLsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAllShortURLs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAllShortURLsRow{}
	for rows.Next() {
		var i ListAllShortURLsRow
		if err := rows.Scan(
			&i.ShortUrl.ID,
			&i.ShortUrl.ShortPath,
			&i.ShortUrl.OriginalURL,
			&i.ShortUrl.UserID,
			&i.ShortUrl.CreatedAt,
			&i.ShortUrl.DeletedAt,
			&i.TotalClicks,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listShortURLsByUserID = `-- name: ListShortURLsByUserID :many
SELECT
    su.id, su.short_path, su.original_url, su.user_id, su.created_at, su.deleted_at,
    (SELECT COUNT(*) FROM url_clicks uc WHERE uc.short_url_id = su.id) AS total_clicks
FROM short_urls su
WHERE su.user_id = ? AND su.deleted_at IS NULL
ORDER BY su.created_at DESC
`

type ListShortURLsByUserIDRow struct {
	ShortUrl    ShortUrl `json:"short_url"`
	TotalClicks int64    `json:"total_clicks"`
}

func (q *Queries) ListShortURLsByUserID(ctx context.Context, userID int64) ([]ListShortURLsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listShortURLsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListShortURLsByUserIDRow{}
	for rows.Next() {
		var i ListShortURLsByUserIDRow
		if err := rows.Scan(
			&i.ShortUrl.ID,
			&i.ShortUrl.ShortPath,
			&i.ShortUrl.OriginalURL,
			&i.ShortUrl.UserID,
			&i.ShortUrl.CreatedAt,
			&i.ShortUrl.DeletedAt,
			&i.TotalClicks,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
